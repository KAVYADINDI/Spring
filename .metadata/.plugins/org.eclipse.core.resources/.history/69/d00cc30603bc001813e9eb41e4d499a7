package com.capgemini.bankApp.service.Impl;

import com.capgemini.bankApp.repository.BankAccountRepository;
import com.capgemini.bankApp.service.BankAccountService;

public class BankAccountServiceImpl implements BankAccountService {

	private BankAccountRepository bankAccountRepository;
	


	public BankAccountServiceImpl(BankAccountRepository bankAccountRepository) {
		super();
		this.bankAccountRepository = bankAccountRepository;
	}

	@Override
	public double getBalance(long accountId) {
		return bankAccountRepository.getBalance(accountId);
	}

	@Override
	public double withdraw(long accountId, double amount) {
		double balance = bankAccountRepository.getBalance(accountId);
		if(balance>=0) {
			if(balance - amount >= 0) {
				bankAccountRepository.updateBalance(accountId, balance - amount);
				return bankAccountRepository.getBalance(accountId);
			}		
		}
		return -1;
	}

	@Override
	public double deposit(long accountId, double amount) {
		double balance = bankAccountRepository.getBalance(accountId);
		if(balance >=0) {
			bankAccountRepository.updateBalance(accountId, balance + amount);
			return bankAccountRepository.getBalance(accountId);
		}
		return balance;
	}

	@Override
	public boolean fundTransfer(long fromAccount, long toAccount, double amount) {
		double balance = withdraw(fromAccount, amount);
		if(balance >= 0)
			if(deposit(toAccount, amount)==-1)
			{
				
			}
		return true;
	}
}
